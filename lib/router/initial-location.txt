
通过重定向来决定页面
GoRouter(
  routes: [
    // Define your routes here
    GoRoute(
      path: '/',
      builder: (context, state) => HomePage(),
    ),
    GoRoute(
      path: '/login',
      builder: (context, state) => LoginPage(),
    ),
    GoRoute(
      path: '/dashboard',
      builder: (context, state) => DashboardPage(),
    ),
  ],
  redirect: (context, state) {
    final bool loggedIn = /* Your logic to check if user is logged in */;

    // If the user is not logged in and tries to access a protected route
    if (!loggedIn && state.fullPath != '/login') {
      return '/login'; // Redirect to login page
    }
    // If the user is logged in and tries to access the login page
    if (loggedIn && state.fullPath == '/login') {
      return '/dashboard'; // Redirect to dashboard
    }
    // No redirect needed, proceed to the requested location
    return null;
  },
  initialLocation: '/', // Set a default initial location
);

提前算好初始页面
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final bool isLoggedIn = await /* Your asynchronous login check */;

  String initialRoute = '/';
  if (isLoggedIn) {
    initialRoute = '/dashboard';
  } else {
    initialRoute = '/login';
  }

  runApp(MyApp(initialRoute: initialRoute));
}

class MyApp extends StatelessWidget {
  final String initialRoute;

  const MyApp({Key? key, required this.initialRoute}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      routerConfig: GoRouter(
        routes: [
          // Define your routes
          GoRoute(path: '/', builder: (context, state) => HomePage()),
          GoRoute(path: '/login', builder: (context, state) => LoginPage()),
          GoRoute(path: '/dashboard', builder: (context, state) => DashboardPage()),
        ],
        initialLocation: initialRoute,
      ),
    );
  }
}