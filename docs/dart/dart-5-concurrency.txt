
异步 ================================================================================

await 只能在 async 方法内被使用

文档里异步的 main 函数
Future<void> main() async { }

普通函数，调用的时候，同步拿到值
String foo() { return "abc"; }
var str = foo();

改成 async 后，返回类型必须变成 Future<String>
Future<String> foo() async { return "abc"; } // 系统会自动创建 Future<String> 实例
var str = foo();        // 类型是 Future<String>
var str = await foo();  // 类型是 String

await 等的是 Future<...>，某函数返回 Future 就可以等它，这函数不用是 async
Future<String> bar() { return Future.value("123"); }
var str = bar();        // 类型是 Future<String>
var str = await bar();  // 类型是 String

对于异步函数，最好 await，如果真的不想等，用 unawaited 明确标记出来
  await doSomething();
  unawaited(doSomething());
linter:       // analysis_options.yaml
  rules:
    unawaited_futures: true
    discarded_futures: true // 不要在同步函数里调异步函数

Flutter 里面推荐用 compute，而不是 Isolate.run
Isolate.run 参数是函数，函数返回 FutureOr<R>。而 run 的返回值是 Future<R>
int slowFib(int n) => n <= 1 ? 1 : slowFib(n - 1) + slowFib(n - 2);
var res = await Isolate.run(() => slowFib(43));
可以给个异步函数字面量，注意那个 async
await Isolate.run(() async { return ...; });



Future 表示异步操作的结果，这是一种承诺，承诺将来会以 value 或 error 结束

等多个异步操作，它们返回值不同，value 是数组
final value = await [getint(), getstr()].wait;
final value = await Future.wait([getint(), getstr()]); // [12, abc]
等多个异步操作，它们的值分别取出来，这里是 Record
final (v1, v2) = await (getint(), getstr()).wait;

Future.new 参数是函数，必传，函数返回 FutureOr<T>
  函数抛出异常，这个新建的 Future 也会异常
  函数返回 Future，等 Future 的结果
  函数返回 value
Future(() => "abc");

Future.delayed 参数是函数，可选，如果传 0 貌似又是事件周期结束再调用？
  函数不传，相当于传了个 () => null
  函数抛出异常，这个新建的 Future 也会异常
  函数返回 Future，等 Future 的结果
  函数返回 value
Future<String> foo() => Future.delayed(Duration(seconds: 2), () => 'Large Latte');

Future.error 参数是 Object，必传，任何对象都行
Future.error("abc")

Future.value 参数是 FutureOr<T>，可选
  传 Future，等 Future 的结果
  传 value，等于 sync(() => value)
  不传，null

Future.sync 参数是函数，必传，马上调用函数
  函数抛出异常，这个新建的 Future 也会异常
  函数返回 Future，等 Future 的结果
  函数返回 value

Future.microtask 参数是函数，必传
  函数抛出异常，这个新建的 Future 也会异常
  函数返回 Future，等 Future 的结果
  函数返回 value



Future.asStream()

Future.ignore()
一个不再被需要的 Future，如果直接丢弃，它可能会抛出异常，最终导致异常没人处理，保险的做法是 ignore 它

Future.whenComplete(() { print("done"); });
相当于 finally，不管成功失败都会调用。它还能返回 Future<void>，有点复杂了理不清了
好像是：前面的 Future 给它什么它就接着往下传递，它自己也能抛出异常

Future.timeout()
如果源 Future 没及时返回，它的 value/error 会被忽略，虽然它可能会执行完，但它的结果被抛弃了
如果超时，第二个参数 FutureOr<T> onTimeout() 会执行，这个新的 Future 作为整个链的返回，就算源比新的更快执行完
如果超时，如果忽略第二个参数，会抛出异常 TimeoutException

Future.catchError()
相当于 catch 语句，第二个参数 test 为真时，才会处理这个异常，默认是真
Future.onError<SomeException>()
捕捉某类异常，有个泛型约束

Future.then()，这是以前的方法，现在新的方式是 async await
如果 Future 已经完成，then 它不会马上执行，而是启动一个 microtask？

print("begin");
final f = Future.sync(() {
  print("emit");
  return "abc";
});
f.then((v) => print(v));
print("end");
// begin emit end abc
前面 then 了，延迟 2 秒再 then，也能拿到数据
所以，能在任何时候给 Future 赋 then，数据始终在那里，但是 catchError 如果赋晚了就捕捉不到异常了，就崩了
Future.delayed(Duration(seconds: 2), () {
  f.then((v) => print(v));
});

then 能串起来。如果 onValue 返回了数据，onError 里面也要 return 12，否则就阻塞了，main() 不结束
串起来的 then 中，任何一个抛出异常都会跳过后续的 then，直接走到 catchError
Future<String> getstr() {
  return Future.delayed(Duration(seconds: 2), () => "abc");
  // return Future.delayed(Duration(seconds: 2), () => Future.error("err"));
}
getstr()
  .then(
    (v) {
      print(v);
      return 11;
    },
    //onError: (e) { // 文档说，onError 能收到 getstr() 抛出的异常，但收不到上面 onValue 内部抛出的异常
    //  print(e);
    //  return 12;
    //},
  )
  .catchError((e) { // 文档说，通常不用 then 里面的 onError，而是用和 then 同级的 catchError
    print(e);
    return 12;
  })
  .then((v) => print(v));

一个坑：解决办法是把它们全部包到一个 return Future.sync(() {}); 中
Future<int> parseAndRead(Map<String, dynamic> data) {
  final filename = obtainFilename(data); // 这是同步抛出的，catchError 抓不住这个异常
  final file = File(filename);
  return file.readAsString().then((contents) {
    return parseFileData(contents); // 这是在 then 内部抛出的，catchError 能抓住此异常
  });
}



Stream 类似于 Publisher
一般遇到错误就结束了，但也能让它继续产生数据和错误
单订阅流只能被 listen 一次，有人订阅才开始产生数据
广播流 ready 后就开始产生数据，新订阅者不会收到以前的数据
流取消以后，下次走到 yield，它就变成一个 return 语句


让流产生错误
Stream<int> stream(int to) async* {
  for (int i = 1; i <= to; i++) {
    if (i == 4) {
      throw Exception('Intentional exception');
    } else {
      yield i;
    }
  }
}
某个流会产生异常，如果直接用 await for 会崩，可以用 handleError 把异常过滤掉
stream = stream.handleError((e) => print(e));


创建 Stream，同步的 Generator 返回 Iterable<int>，这里是异步的 Generator
同步的 yield* 后接数组，异步的后接另一个 Stream
这函数会马上返回一个 Stream<int>，然后当有人订阅后，函数体才会开始执行，真的
Stream<int> asynchronousNaturalsTo(int n) async* {
  int k = 0;
  while (k < n) yield k++;
}

final controller = StreamController<int>(
  onPause: () => print('Paused'),
  onResume: () => print('Resumed'),
  onCancel: () => print('Cancelled'),
  onListen: () => print('Listens'),
);
controller.add(1);
创建个 stream，它背后在运行，main() 退出不了
下面这个流有两个问题：1)没人订阅它也会产生数据；2)无法取消，它会一直产生数据
Stream<int> timedCounter(Duration interval, [int? maxCount]) {
  var controller = StreamController<int>();
  int counter = 0;
  void tick(Timer timer) {
    counter++;
    controller.add(counter); // Ask stream to send counter values as event.
    if (maxCount != null && counter >= maxCount) {
      timer.cancel();
      controller.close(); // Ask stream to shut down and tell listeners.
    }
  }
  Timer.periodic(interval, tick); // BAD: Starts before it has subscribers.
  return controller.stream;
}
var stream = timedCounter(Duration(seconds: 1));
await Future.delayed(const Duration(seconds: 5));
await for (var e in stream) { } // 5 秒后突然收到 12345，然后每秒收到一个
// 这无法收到数据，为何？
// 经研究，不是收不到，是写错了。应该是 stream.listen(print);
// stream.listen((e) => print);


await for (final value in stream) { } // 0 1 2 3... <= 会阻塞后续代码
能用 break/return 退出循环，文档还说会取消订阅这个流

用 listen 方法接收数据，这方法还有 onError / onDone 这些参数。返回值是 StreamSubscription，用于取消
stream.listen((value) { print(value); }); <= 不会阻塞后续代码，但 main() 好像要等它结束？
stream.listen((value) => print(value));
stream.listen(print);



Stream.new
Stream.empty 虽是空流，但不会空等，有 done 的。默认是广播流
Stream.error 等于 Future.error(error).asStream()
Stream.value 等于 Future.value(value).asStream()

Stream.eventTransformed 没研究透？source 广播则结果也是广播

Stream.fromFuture
Stream.fromFutures 数据顺序是它们完成的顺序
如果在调用 fromFutures 之前有几个 Future 已经完成，它们的顺序是未定义的
如果 Future 列表为空，这个 Stream 会尽快完成

Stream.fromIterable()
能从数据创建流，能多个订阅，每个订阅都能得到从头到尾的数据

Stream.multi 创建广播流，没研究透？

Stream.periodic 起点是 0
Stream<int> stream = Stream.periodic(Duration(seconds: 1), (i) => i);



asBroadcastStream

forEach -> Future<void>
listen -> StreamSubscription<T>

length -> Future<int>
isEmpty -> Future<bool>


single -> Future<T>
流产生异常，则 Future 也异常
流空 或 多数据，则 Future 异常，真的
像是 Future.asStream() 的相反操作

pipe -> Future
没研究透？把当前流导向一个 StreamConsumer

transform -> Stream<S>
没研究透？
stream_transformer.bind(this) 的链式简便写法



检查有没有某个值

every -> Future<bool>
检查每一个元素符合 test，有不符合的马上返回 false。空流会返回 true。流错或 test 错 Future 也错
any -> Future<bool>
检查是否有元素符合 test，有符合的马上返回 true。流错或 test 错 Future 也错
contains -> Future<bool>
参数是 Object?，通过 == 比较，any 是用一个比较函数



获取一个值

first / last -> Future<T>
流空会崩

elementAt -> Future<T>
得到值后停止订阅源
error 先出 / done 先出，都是异常

firstWhere -> Future<T>
lastWhere -> Future<T>
得到值后停止订阅源
找到的第一个，如果没找到，第二个参数的值作为值，没找到也不给值第二个参数会崩
singleWhere -> Future<T>
等于 lastWhere，不过，如果有多个元素匹配会崩，没找到也不给值第二个参数会崩



变成一个值

reduce -> Future<T>
无初始值，空流会崩
fold -> Future<T>
有初始值，空流不崩

join -> Future<String>
对每个元素使用 Object.toString，然后用分隔符拼接起来

drain -> Future<E>
清空所有元素，只保留 done/error
它有个参数接受一个值，如果 done 发生了，Future 就发出那个值，不传就是 null



筛选流中元素

skip -> Stream<T>
源流如果数量不足，则生成空流
skipWhile -> Stream<T>
匹配的时候就跳过，直到不匹配。后续再有数据不匹配也不会过滤了

take -> Stream<T>
takeWhile -> Stream<T> 只取前面符合的数据，直到不匹配。后续再有数据匹配也不要了

where -> Stream<T>
就是 filter

distinct -> Stream<T>
间隔的元素可以相等，连续不行。如果不传比较函数，用 ==

cast -> Stream<R>
从 T adapt 到 R，并不是转换成 R，而是运行时检查 T 真的是 R

handleError -> Stream<T>
处理符合 test 的错误，如果不传 test 则处理所有的错

timeout -> Stream<T>
有人订阅开始计时，新数据来则重新计时
如果超时，不给第二参数，会抛出 TimeoutException。后面的 listen 先收到异常，过一会收到数据
如果超时，给了第二参数，不会抛出异常。但后面的 listen 过一会收到数据
如果超时，给了第二参数，不会抛出异常。如果 sink.close()，后面就不会收到数据了。关闭前还能 sink.add("123") 加数据



转换流中元素

expand -> Stream<S>
先升维再降维，相当于 flatMap
asyncExpand -> Stream<E>
上面的转换方法把元素转换成 Iterable<S>，这里转换成 Stream<E>

map -> Stream<S>
就是 map，转换函数的返回值是 S
asyncMap ->Stream<E>
转换函数的返回值是 FutureOr<E>
