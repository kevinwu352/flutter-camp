三种构建模式
flutter run // 能启动模拟器，应该就是 F5
flutter run --profile
flutter build ios --release // 发布的时候用这个，打出 release 的 App.framework 和 Flutter.framework，再用 xcode archive 上传
flutter build ipa // 直接编译成 ipa，然后用 Apple Transport App 去上传
flutter build ipa --export-method enterprise // 导出企业版

开启布局边框
import 'package:flutter/rendering.dart';
void main() {
  debugPaintSizeEnabled = true;
  runApp(const MyApp());
}

注意这个样式的用法
final iconList = DefaultTextStyle.merge(
  style: descTextStyle,
  child: ,
);

可以用来生成固定数量的子视图
List<int>.generate(10, (i) => i * i)

一个看不见，占位0的视图
SizedBox.shrink()

文档说：推荐把 Scaffold 的子用 SafeArea 包起来

适配平台的图标
Icon(Icons.arrow_back)
Icon(Icons.adaptive.arrow_back)
但好像数量不多，arrow* flip* more* share*

Material 3 要用新组件
BottomNavigationBar to NavigationBar
Drawer to NavigationDrawer

支持的字体类型
OpenType font collections: .ttc
TrueType fonts: .ttf
OpenType fonts: .otf


系统定义的回调 ValueChanged
final ValueChanged<bool> onChanged;


看看这个接口的定义，带默认实现的，实现它的类只需要实现一个方法即可
abstract interface class Comparable<T> {
  int compareTo(T other);
  static int compare(Comparable a, Comparable b) => a.compareTo(b);
}


加载 bundle 的文件
推荐用这种方式，单元测试的时候能替换
final str = await DefaultAssetBundle.of(context,).loadString("assets/jsons/user.json");
如果在 widget 外面，没有 context，用下面这种方式
import 'package:flutter/services.dart' show rootBundle;
final str = await rootBundle.loadString("assets/jsons/user.json");

.../my_icon.png       (mdpi baseline)
.../1.5x/my_icon.png  (hdpi)
.../2.0x/my_icon.png  (xhdpi)
.../3.0x/my_icon.png  (xxhdpi)
.../4.0x/my_icon.png  (xxxhdpi)
真的加载了 3.0x 目录下的图片
且这些子目录不用在 pubspec.yaml 中分别列出来，这是例外，其它资源的子目录都要列出来
不加 my_icon.png 好像会崩，一定要它吗？
Image.asset("assets/images/num.png")

AssetImage / NetworkImage 继承了 ImageProvider<Object>
  // 这俩等价
  Image(image: AssetImage("assets/images/num.png")),
  Image.asset("assets/images/num.png"),
  // 这俩等价
  Image(image: NetworkImage("https://avatars2.githubusercontent.com/u/20411648?s=460&v=4"), width: 100.0),
  Image.network("https://avatars2.githubusercontent.com/u/20411648?s=460&v=4", width: 100.0),




================================================================================


CarouselView
Flow 能做很炫那种，弹出一堆按钮的按钮


LayoutBuilder 可以根据父传过来的尺寸决定显示两列还是一列


IndexedStack 同一时间只显示一个控件的 Stack
Stack 前后重叠
Positioned 只能用于 Stack 中

Wrap 能自动换行的 Row/Column，Chip 放里面比较好
Chip 三个元素的小组件，文字/图标/删除


RotatedBox 旋转后，layout 也旋转了
Transform.rotate 旋转后，占的位置还是原来的。比如一个宽盒子竖起来，占位还是很宽的

FractionalTranslation 按照子的百分比进行偏移


BackdropFilter 用来做高斯模糊，视频里说效果不是加到它的 child 上的，而是它背后
BackdropFilter(
  filter: ImageFilter.blur(sigmaX: 0.5, sigmaY: 0.5),
  child: Container(color: Colors.black.withValues(alpha: 0)),
)
用 Stack，然后把它盖在其它控件上面


DropdownButton 右边有个三角的横线输入框，下拉选择
  DropdownMenuItem

ClipRRect 用于把子内容切圆角
ClipRRect(
  borderRadius: BorderRadius.circular(20),
  child: Image.asset(...)
)

class HeroWidget extends Stateless {
  build() {
    return Hero(
      tag: 'hero1'
      child: Text('abc')
    )
  }
}

条幅样式的 HUD
ScaffoldMessenger.of(context).showSnackBar(
  SnackBar(
    content: Text("title"),
    duration: Duration(seconds: 5),
    behavior: SnackBarBehavior.floating,
  ),
);

Divider(
  color
  thickness
  endIndent
)
Container( 垂直方向的分隔线
  height: 50
  child: VerticalDivider()
)

Dismissible 左右滑显示列表单行下面的选项


IgnorePointer 忽略事件，事件被传递到背后的视图了
AbsorbPointer 接收事件，并且自己把事件吃掉了
Container(
  width: 200,
  height: 200,
  color: Colors.blue,
  child: Stack(
    children: [
      Listener(
        onPointerDown: (event) {
          print("red down");
        },
        child: Container(color: Colors.red),
      ),
      Listener(
        onPointerDown: (event) {
          print("green down");
        },
        child: IgnorePointer(
          child: Container(color: Colors.green, width: 100, height: 100),
        ),
      ),
    ],
  ),
),


InteractiveViewer 查看大图片

Draggable / LongPressDraggable

